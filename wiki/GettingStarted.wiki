#summary Getting started with the gwt-cal component library.
#labels Featured

= Setup =

 # Add the gwt-cal jar file to your project's build path. Right-click on the project node in the Package Explorer and select 'Build Path > Add External Archives...'. Specify the downloaded `gwt-cal-<version>.jar`
 # Modify `<Your Application>.gwt.xml` to inherit the gwt-cal module and theme:

{{{
  <inherits name='com.bradrydzewski.gwt.calendar.Calendar' />
  <inherits name='com.bradrydzewski.gwt.calendar.theme.google.Google' />
}}}


= Simple Example =

Adding the calendar widget to a `Panel` just like any standard gwt widget. 
{{{
DayView dayView = new DayView();
dayView.setDate(new Date()); //calendar date, not required
dayView.setDays(3); //number of days displayed at a time, not required
add(dayView);
}}}

You can then hook up an event listener to capture when an appointment is selected:
{{{
dayView.addValueChangeHandler(new ValueChangeHandler<Appointment>(){
	@Override
	public void onValueChange(ValueChangeEvent<Appointment> event) {
		// TODO Auto-generated method stub			
	}		
});
}}}

= Adding Appointment =

The following code snippet demonstrates how to create and add an appointment to the calendar widget. Every time an appointment is added to the calendar widget the layout is re-calculated and performed.

{{{
Appointment appt = new Appointment();
appt.setStart(...);
appt.setEnd(...);
appt.setTitle(...);
appt.addStyleName("gwt-appointment-blue");
dayView.add(appt);
}}}

== appointment style ==

When adding appointments you provide it with a style that defines its color palette. Use the `addStyleName` method. Available color styles are: `gwt-appointment-blue`, `gwt-appointment-green`

== appointments in batch ==

As stated earlier, every time an appointment is added to the calendar widget the layout is re-calculated. If you plan to add many appointments at once you should suspend the layout and then resume it once you are complete:

{{{
dayView.suspendLayout();

//load 1,000 appointments into calendar
for(int i=0;i<1000;i++) {
	Appointment appt = new Appointment();
	...
	dayView.add(appt);
}

dayView.resumeLayout();
}}}

= Layout =

As discussed, layout is calculated when an appointment is added, or when `resumeLayout` is invoked. Layout is also calculated when `setDays` and `setDate` are added.

There is no need to recalculate layout when the width or height of the calendar changes. The items use %'s to position the appointments on the screen. That being said, you should never set the calendar's height to a % - only use a fixed pixel value. Feel free to set calendar width to a % or fixed pixel value.